#include "/Engine/Public/Platform.ush"
#include "TerrainShaderUtils.ush"
#include "ErosionShaderUtils.ush"

int Size;
float DeltaTime;
float ErosionScale;
float DepositionScale;

RWStructuredBuffer<float4> TerrainData;
RWStructuredBuffer<float4> Flux;
RWStructuredBuffer<float2> Velocity;

RWStructuredBuffer<float4> TempTerrainData;

float LMax(float Water)
{
	if(Water <= 0.0f) return 0.0f;
	else if(Water < MAX_EROSION_DEPTH) return 1.0f - (MAX_EROSION_DEPTH - Water) / MAX_EROSION_DEPTH;
	else return 1.0f;
}

[NUM_THREADS]
void Main(uint3 id : SV_DispatchThreadID)
{
	TEMP_HEIGHT(INDEX) = HEIGHT(INDEX);
	TEMP_SEDIMENT(INDEX) = SEDIMENT(INDEX);
	TEMP_WATER(INDEX) = WATER(INDEX);
	
	float LInValue = id.x == 0? 0: Flux[L_INDEX].y;
	float RInValue = id.x == (uint)Size - 1? 0: Flux[R_INDEX].x;
	float TInValue = id.y == 0? 0: Flux[T_INDEX].w;
	float BInValue = id.y == (uint)Size - 1? 0: Flux[B_INDEX].z;
	Velocity[INDEX].x = (LInValue - Flux[INDEX].x + Flux[INDEX].y - RInValue) / 2;
	Velocity[INDEX].y = (TInValue - Flux[INDEX].z + Flux[INDEX].w - BInValue) / 2;
	Velocity[INDEX] = clamp(Velocity[INDEX], -100.0f, 100.0f);
	float LHeight = id.x == 0?					HEIGHT(INDEX) + SEDIMENT(INDEX):	HEIGHT(L_INDEX) + SEDIMENT(L_INDEX);
	float RHeight = id.x == (uint)Size - 1?		HEIGHT(INDEX) + SEDIMENT(INDEX):	HEIGHT(R_INDEX) + SEDIMENT(R_INDEX);
	float THeight = id.y == 0?					HEIGHT(INDEX) + SEDIMENT(INDEX):	HEIGHT(T_INDEX) + SEDIMENT(T_INDEX);
	float BHeight = id.y == (uint)Size - 1?		HEIGHT(INDEX) + SEDIMENT(INDEX):	HEIGHT(B_INDEX) + SEDIMENT(B_INDEX);

	// float VelocityValue = sqrt(Velocity[INDEX].x * Velocity[INDEX].x + Velocity[INDEX].y * Velocity[INDEX].y);
	
	float SinTiltAngle = sqrt((LHeight - RHeight) * (LHeight - RHeight) / 4 + (THeight - BHeight) * (THeight - BHeight) / 4);
	SinTiltAngle /= sqrt(1 + (LHeight - RHeight) * (LHeight - RHeight) / 4 + (THeight - BHeight) * (THeight - BHeight) / 4);
	float LMaxValue = LMax(WATER(INDEX));
	float SedimentCapacity = SinTiltAngle * length(Velocity[INDEX]) * LMaxValue * SEDIMENT_CAPACITY_SCALE;
	if(SedimentCapacity > SEDIMENT(INDEX))
	{
		float ErosionValue = (SedimentCapacity - SEDIMENT(INDEX)) * ErosionScale * DeltaTime * HARDNESS(INDEX);
		TEMP_HEIGHT(INDEX) -= ErosionValue;
		TEMP_SEDIMENT(INDEX) += ErosionValue;
		// TEMP_WATER(INDEX) += ErosionValue;
	}
	else
	{
		float DepositionValue = (SEDIMENT(INDEX) - SedimentCapacity) * DepositionScale * DeltaTime;
		TEMP_HEIGHT(INDEX) += DepositionValue;
		TEMP_SEDIMENT(INDEX) -= DepositionValue;
		// TEMP_WATER(INDEX) -= DepositionValue;
		// HARDNESS(INDEX) = max(R_MIN, HARDNESS(INDEX) - SEDIMENT_SOFTEN_COEFFICIENT * DepositionValue);
	}
	HARDNESS(INDEX) = clamp(HARDNESS(INDEX) - SEDIMENT_SOFTEN_COEFFICIENT * (SEDIMENT(INDEX) - SedimentCapacity) * ErosionScale * DeltaTime, 0.0f, 1.0f);
}