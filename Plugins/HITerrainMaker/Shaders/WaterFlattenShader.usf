#include "/Engine/Public/Platform.ush"
#include "TerrainShaderUtils.ush"

/*
 * 平整水面模块的 Compute Shader
 */

int Size;

float DeltaTime;

RWStructuredBuffer<float3> TerrainData;
RWStructuredBuffer<float4> Flux;

[NUM_THREADS]
void Main(uint3 id : SV_DispatchThreadID)
{
	float Value = HEIGHT(INDEX) + SEDIMENT(INDEX) + WATER(INDEX);
	float LValue = id.x == 0? Value: HEIGHT(L_INDEX) + SEDIMENT(L_INDEX) + WATER(L_INDEX);
	float RValue = id.x == (uint)Size - 1? Value: HEIGHT(R_INDEX) + SEDIMENT(R_INDEX) + WATER(R_INDEX);
	float TValue = id.y == 0? Value: HEIGHT(T_INDEX) + SEDIMENT(T_INDEX) + WATER(T_INDEX);
	float BValue = id.y == (uint)Size - 1? Value: HEIGHT(B_INDEX) + SEDIMENT(B_INDEX) + WATER(B_INDEX);
	Flux[INDEX] = float4((Value - LValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH + Flux[INDEX].x,
							(Value - RValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH + Flux[INDEX].y,
							(Value - TValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH + Flux[INDEX].z,
							(Value - BValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH + Flux[INDEX].w);
	// float4 FluxValue = float4((Value - LValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH,
	// 						(Value - RValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH,
	// 						(Value - TValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH,
	// 						(Value - BValue) * DeltaTime * GRAVITY * PIPE_CROSS_SECTION_AREA / PIPE_LENGTH);
	Flux[INDEX] = max(float4(0.0f, 0.0f, 0.0f, 0.0f), Flux[INDEX]);
	if(Flux[INDEX].x + Flux[INDEX].y + Flux[INDEX].z + Flux[INDEX].w > 0.1f)
	{
		float K = min(1.0f, WATER(INDEX) * GRID_X_DISTANCE * GRID_Y_DISTANCE / (Flux[INDEX].x + Flux[INDEX].y + Flux[INDEX].z + Flux[INDEX].w) / DeltaTime);
		Flux[INDEX] = Flux[INDEX] * K;
	}
	else
	{
		Flux[INDEX] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	}
}